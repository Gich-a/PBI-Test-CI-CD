# GitHub Actions Workflow for deploying a Power BI Project (PBIP)
# This workflow includes steps for testing the project structure and deploying to a development workspace.

name: Power BI Deployment Pipeline

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run PBIP Structural Tests

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install Python dependencies
        run: pip install -r requirements.txt

      - name: üß™ Run PBIP structure tests
        run: python tests/tests.py powerbi/

  deploy-dev:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy PBIP to DEV Workspace
    
    # Environment variables are mapped from GitHub secrets to be used in the deployment script.
    # These secrets must be configured in your repository's settings.
    env:
      TENANT_ID: ${{ secrets.PBI_TENANT_ID }}
      CLIENT_ID: ${{ secrets.PBI_CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.PBI_CLIENT_SECRET }}
      WORKSPACE_ID: ${{ secrets.PBI_WORKSPACE_ID_DEV }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      # CORRECTED: Added a step to install the required Power BI management modules.
      # The 'Connect-PowerBIServiceAccount' cmdlet is part of this module.
      - name: üì¶ Install Power BI PowerShell Modules
        shell: pwsh
        run: Install-Module -Name MicrosoftPowerBIMgmt -Force -AcceptLicense

      - name: üöÄ Deploy PBIP to DEV Workspace
        # This script now runs after the required modules have been installed.
        shell: pwsh
        run: |
          # Import the custom PowerShell module for Fabric/Power BI operations.
          # This module likely contains the custom 'Publish-PowerBIProject' function.
          Import-Module './FabricPS-PBIP.psm1'

          # Retrieve credentials and identifiers from environment variables.
          $ClientId = $env:CLIENT_ID
          $ClientSecret = $env:CLIENT_SECRET
          $TenantId = $env:TENANT_ID
          $WorkspaceId = $env:WORKSPACE_ID

          # Use [string]::IsNullOrEmpty() for a more robust check of environment variables.
          if ([string]::IsNullOrEmpty($ClientId) -or [string]::IsNullOrEmpty($ClientSecret) -or [string]::IsNullOrEmpty($TenantId) -or [string]::IsNullOrEmpty($WorkspaceId)) {
            throw 'üîê Missing required environment variables. Ensure PBI_TENANT_ID, PBI_CLIENT_ID, PBI_CLIENT_SECRET, and PBI_WORKSPACE_ID_DEV secrets are set.'
          }

          # Connect to the Power BI service using the service principal credentials.
          # This command is now available because the MicrosoftPowerBIMgmt module was installed in the previous step.
          # CORRECTED: Changed -ClientSecret to -ServicePrincipalSecret
          Connect-PowerBIServiceAccount -ServicePrincipal -TenantId $TenantId -ApplicationId $ClientId -ServicePrincipalSecret $ClientSecret

          # Verify that the Power BI Project (PBIP) folder exists at the specified path.
          Write-Host 'üìÅ Verifying PBIP project folder...'
          $pbipPath = './powerbi/AdventureWorks Report.pbip'
          if (!(Test-Path $pbipPath)) {
            throw "‚ùå PBIP project folder not found at path: $pbipPath"
          }

          # Publish the project to the specified Power BI workspace.
          # -EnableRefresh will trigger a dataset refresh after publishing.
          # -Overwrite will update the existing report and dataset if they already exist.
          Write-Host 'üì¶ Deploying PBIP artifact...'
          Publish-PowerBIProject -Path $pbipPath -WorkspaceId $WorkspaceId -EnableRefresh -Overwrite

          Write-Host '‚úÖ Deployment successful.'
